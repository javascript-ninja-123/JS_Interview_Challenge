/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _defineUnion = require('../core/defineUnion')
var _equals = require('../core/equals')
var _implements = require('../core/implements')
var _innerConcat = require('../core/innerConcat')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Either')

var compose = require('../core/compose')
var isApplicative = require('../core/isApplicative')
var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

var constant = function (x) { return function () { return x; }; }

var _either =
  _defineUnion({ Left: [ 'a' ], Right: [ 'b' ] })

var Left = _either.Left;
var Right = _either.Right;

Either.Left =
  compose(Either, Left)

Either.Right =
  compose(Either, Right)

var _of =
  Either.Right

function runSequence(x) {
  if(!isApplicative(x)) {
    throw new TypeError('Either.sequence: Must wrap an Applicative')
  }

  return x.map(Either.of)
}

function Either(u) {
  if(!arguments.length) {
    throw new TypeError('Either: Must wrap something, try using Left or Right constructors')
  }

  var x = !_either.includes(u)
    ? Right(u)
    : u

  var equals =
    function (m) { return isSameType(Either, m) && either(
      function (x) { return m.either(function (y) { return _equals(y, x); }, constant(false)); },
      function (x) { return m.either(constant(false), function (y) { return _equals(y, x); }); }
    ); }

  var of =
    _of

  var inspect = constant(
    either(
       function (l) { return ("Left" + (_inspect(l))); },
       function (r) { return ("Right" + (_inspect(r))); }
    )
  )

  function either(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Either.either: Requires both left and right functions')
    }

    return _either.caseOf({
      Left: f,
      Right: g
    }, x)
  }

  function concat(m) {
    if(!isSameType(Either, m)) {
      throw new TypeError('Either.concat: Either of Semigroup required')
    }

    return either(
      Either.Left,
      _innerConcat(Either, m)
    )
  }

  function swap(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Either.swap: Requires both left and right functions')
    }

    return either(
      compose(Either.Right, f),
      compose(Either.Left, g)
    )
  }

  function coalesce(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Either.coalesce: Requires both left and right functions')
    }

    return Either.Right(either(f, g))
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Either.map: Function required')
    }

    return either(Either.Left, compose(Either.Right, fn))
  }

  function bimap(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Either.bimap: Requires both left and right functions')
    }

    return either(
      compose(Either.Left, f),
      compose(Either.Right, g)
    )
  }

  function alt(m) {
    if(!isSameType(Either, m)) {
      throw new TypeError('Either.alt: Either required')
    }

    return either(
      constant(m),
      Either.Right
    )
  }

  function ap(m) {
    if(!either(constant(true), isFunction)) {
      throw new TypeError('Either.ap: Wrapped value must be a function')
    }
    else if(!either(constant(true), constant(isSameType(Either, m)))) {
      throw new TypeError('Either.ap: Either required')
    }

    return chain(function (fn) { return m.map(fn); })
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Either.chain: Function required')
    }

    var m = either(Either.Left, fn)

    if(!isSameType(Either, m)) {
      throw new TypeError('Either.chain: Function must return an Either')
    }

    return m
  }

  function sequence(af) {
    if(!isFunction(af)) {
      throw new TypeError('Either.sequence: Applicative returning function required')
    }

    return either(
      compose(af, Either.Left),
      runSequence
    )
  }

  function traverse(af, f) {
    if(!isFunction(f) || !isFunction(af)) {
      throw new TypeError('Either.traverse: Applicative returning functions required for both arguments')
    }

    var m = either(compose(af, Either.Left), f)

    if(!isApplicative(m)) {
      throw new TypeError('Either.traverse: Both functions must return an Applicative')
    }

    return either(
      constant(m),
      constant(m.map(Either.of))
    )
  }

  return {
    inspect: inspect, either: either, type: type, concat: concat,
    swap: swap, coalesce: coalesce, equals: equals, map: map, bimap: bimap,
    alt: alt, ap: ap, of: of, chain: chain, sequence: sequence, traverse: traverse
  }
}

Either.of   = _of
Either.type = type

Either['@@implements'] = _implements(
  [ 'alt', 'ap', 'bimap', 'chain', 'concat', 'equals', 'map', 'of', 'traverse' ]
)

module.exports = Either
