/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _equals = require('../core/equals')
var _implements = require('../core/implements')
var _innerConcat = require('../core/innerConcat')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Identity')

var isApplicative = require('../core/isApplicative')
var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

var _of =
  Identity

function Identity(x) {
  if(!arguments.length) {
    throw new TypeError('Identity: Must wrap something')
  }

  var valueOf =
    function () { return x; }

  var of =
    _of

  var equals =
    function (m) { return isSameType(Identity, m)
      && _equals(x, m.valueOf()); }

  var inspect =
    function () { return ("Identity" + (_inspect(x))); }

  function concat(m) {
    if(!isSameType(Identity, m)) {
      throw new TypeError('Identity.concat: Identity of Semigroup required')
    }

    return _innerConcat(Identity, m)(x)
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Identity.map: Function required')
    }

    return Identity(fn(x))
  }

  function ap(m) {
    if(!isFunction(x)) {
      throw new TypeError('Identity.ap: Wrapped value must be a function')
    }
    else if(!isSameType(Identity, m)) {
      throw new TypeError('Identity.ap: Identity required')
    }

    return m.map(x)
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Identity.chain: Function required')
    }

    var m = fn(x)

    if(!isSameType(Identity, m)) {
      throw new TypeError('Identity.chain: Function must return an Identity')
    }

    return m
  }

  function sequence(af) {
    if(!isFunction(af)) {
      throw new TypeError('Identity.sequence: Applicative Function required')
    }
    else if(!isApplicative(x)) {
      throw new TypeError('Identity.sequence: Must wrap an Applicative')
    }

    return x.map(Identity)
  }

  function traverse(af, f) {
    if(!isFunction(f) || !isFunction(af)) {
      throw new TypeError('Identity.traverse: Applicative returning functions required for both arguments')
    }

    var m = f(x)

    if(!isApplicative(m)) {
      throw new TypeError('Identity.traverse: Both functions must return an Applicative')
    }

    return m.map(Identity)
  }

  return {
    inspect: inspect, valueOf: valueOf, type: type, equals: equals,
    concat: concat, map: map, ap: ap, of: of, chain: chain,
    sequence: sequence, traverse: traverse
  }
}

Identity.of = _of
Identity.type = type

Identity['@@implements'] = _implements(
  [ 'ap', 'chain', 'concat', 'equals', 'map', 'of', 'traverse' ]
)

module.exports = Identity
