/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _equals = require('./equals')
var _implements = require('./implements')
var _inspect = require('./inspect')
var type = require('./types').type('Pair')

var isFunction = require('./isFunction')
var isSameType = require('./isSameType')
var isSemigroup = require('./isSemigroup')

function Pair(l, r) {
  if(arguments.length < 2) {
    throw new TypeError('Pair: Must provide a first and second value')
  }

  var fst =
    function () { return l; }

  var snd =
    function () { return r; }

  var inspect =
    function () { return ("Pair(" + (_inspect(l)) + "," + (_inspect(r)) + " )"); }

  var toArray =
    function () { return [ l, r ]; }

  function merge(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Pair.merge: Binary function required')
    }

    return fn(fst(), snd())
  }

  function equals(m) {
    return isSameType(Pair, m)
      && _equals(m.fst(), fst())
      && _equals(m.snd(), snd())
  }

  function concat(m) {
    if(!(m && isSameType(Pair, m))) {
      throw new TypeError('Pair.concat: Pair required')
    }

    var lf = fst()
    var ls = snd()
    var rf = m.fst()
    var rs = m.snd()

    if(!(isSemigroup(lf) && isSemigroup(ls))) {
      throw new TypeError('Pair.concat: Both Pairs must contain Semigroups of the same type')
    }

    if(!(isSameType(lf, rf) && isSameType(ls, rs))) {
      throw new TypeError('Pair.concat: Both Pairs must contain Semigroups of the same type')
    }

    return Pair(
      lf.concat(rf),
      ls.concat(rs)
    )
  }

  function swap(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Pair.swap: Requires both left and right functions')
    }

    return Pair(g(r), f(l))
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Pair.map: Function required')
    }

    return Pair(l, fn(r))
  }

  function bimap(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Pair.bimap: Function required for both arguments')
    }

    return Pair(f(l), g(r))
  }

  function ap(m) {
    if(!(isSameType(Pair, m))) {
      throw new TypeError('Pair.ap: Pair required')
    }

    var fn = snd()

    if(!isFunction(fn)) {
      throw new TypeError('Pair.ap: Function required for second value')
    }

    var l = fst()
    var r = m.fst()

    if(!(isSemigroup(l) && isSameType(l, r))) {
      throw new TypeError('Pair.ap: Semigroups of the same type is required for first values')
    }

    return Pair(l.concat(r), fn(m.snd()))
  }

  function chain(fn) {
    var l = fst()

    if(!isFunction(fn)) {
      throw new TypeError('Pair.chain: Function required')
    }

    if(!isSemigroup(l)) {
      throw new TypeError('Pair.chain: Semigroups of the same type required for first values')
    }

    var m = fn(snd())

    if(!(isSameType(Pair, m))) {
      throw new TypeError('Pair.chain: Function must return a Pair')
    }

    var r = m.fst()

    if(!isSameType(l, r)) {
      throw new TypeError('Pair.chain: Semigroups of the same type required for first values')
    }

    return Pair(
      l.concat(r),
      m.snd()
    )
  }

  function extend(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Pair.extend: Function required')
    }

    return Pair(l, fn(Pair(l, r)))
  }

  return {
    inspect: inspect, fst: fst, snd: snd, toArray: toArray,
    type: type, merge: merge, equals: equals, concat: concat,
    swap: swap, map: map, bimap: bimap, ap: ap, chain: chain,
    extend: extend
  }
}

Pair.type =
  type

Pair['@@implements'] = _implements(
  [ 'ap', 'bimap', 'chain', 'concat', 'extend', 'equals', 'map' ]
)

module.exports = Pair
