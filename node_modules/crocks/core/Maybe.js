/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _defineUnion = require('./defineUnion')
var _equals = require('./equals')
var _implements = require('./implements')
var _innerConcat = require('./innerConcat')
var _inspect = require('./inspect')
var type = require('./types').type('Maybe')

var compose = require('./compose')
var isApplicative = require('./isApplicative')
var isFunction = require('./isFunction')
var isSameType = require('./isSameType')

var constant = function (x) { return function () { return x; }; }
var identity = function (x) { return x; }

var _maybe =
  _defineUnion({ Nothing: [], Just: [ 'a' ] })

var Nothing =
  _maybe.Nothing

var Just =
  _maybe.Just

Maybe.Nothing =
  compose(Maybe, Nothing)

Maybe.Just =
  compose(Maybe, Just)

var _of =
  compose(Maybe, Just)

var _zero =
  compose(Maybe, Nothing)

function Maybe(u) {
  if(!arguments.length) {
    throw new TypeError('Maybe: Must wrap something, try using Nothing or Just constructors')
  }

  var x =
    !_maybe.includes(u) ? Just(u) : u

  var of =
    _of

  var zero =
    _zero

  var option =
    function (n) { return either(constant(n), identity); }

  var equals =
    function (m) { return isSameType(Maybe, m) && either(
      constant(m.either(constant(true), constant(false))),
      function (x) { return m.either(constant(false), function (y) { return _equals(y, x); }); }
    ); }

  var inspect = function () { return either(
      constant('Nothing'),
      function (x) { return ("Just" + (_inspect(x))); }
    ); }

  function either(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Maybe.either: Requires both left and right functions')
    }

    return _maybe.caseOf({
      Nothing: f,
      Just: g
    }, x)
  }

  function concat(m) {
    if(!isSameType(Maybe, m)) {
      throw new TypeError('Maybe.concat: Maybe of Semigroup required')
    }

    return either(
      Maybe.Nothing,
      _innerConcat(Maybe, m)
    )
  }

  function coalesce(f, g) {
    if(!isFunction(f) || !isFunction(g)) {
      throw new TypeError('Maybe.coalesce: Requires both left and right functions')
    }

    return Maybe.Just(either(f, g))
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Maybe.map: Function required')
    }

    return either(
      Maybe.Nothing,
      compose(Maybe.Just, fn)
    )
  }

  function alt(m) {
    if(!isSameType(Maybe, m)) {
      throw new TypeError('Maybe.alt: Maybe required')
    }

    return either(
      constant(m),
      Maybe.Just
    )
  }

  function ap(m) {
    var fn = option(constant(undefined))

    if(!isFunction(fn)) {
      throw new TypeError('Maybe.ap: Wrapped value must be a function')
    }
    else if(!isSameType(Maybe, m)) {
      throw new TypeError('Maybe.ap: Maybe required')
    }

    return either(
      Maybe.Nothing,
      m.map
    )
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Maybe.chain: Function required')
    }

    var m = either(Maybe.Nothing, fn)

    if(!isSameType(Maybe, m)) {
      throw new TypeError('Maybe.chain: Function must return a Maybe')
    }

    return m
  }

  function runSequence(x) {
    if(!isApplicative(x)) {
      throw new TypeError('Maybe.sequence: Must wrap an Applicative')
    }

    return x.map(Maybe.of)
  }

  function sequence(af) {
    if(!isFunction(af)) {
      throw new TypeError('Maybe.sequence: Applicative returning function required')
    }

    return either(
      compose(af, Maybe.Nothing),
      runSequence
    )
  }

  function traverse(af, f) {
    if(!isFunction(f) || !isFunction(af)) {
      throw new TypeError('Maybe.traverse: Applicative returning functions required for both arguments')
    }

    var m = either(compose(af, Maybe.Nothing), f)

    if(!isApplicative(m)) {
      throw new TypeError('Maybe.traverse: Both functions must return an Applicative')
    }

    return either(
      constant(m),
      constant(m.map(Maybe))
    )
  }

  return {
    inspect: inspect, either: either, option: option, type: type,
    concat: concat, equals: equals, coalesce: coalesce, map: map, alt: alt,
    zero: zero, ap: ap, of: of, chain: chain, sequence: sequence,
    traverse: traverse
  }
}

Maybe.of =
  _of

Maybe.type =
  type

Maybe.zero =
  _zero

Maybe['@@implements'] = _implements(
  [ 'alt', 'ap', 'chain', 'concat', 'equals', 'map', 'of', 'traverse', 'zero' ]
)

module.exports = Maybe
