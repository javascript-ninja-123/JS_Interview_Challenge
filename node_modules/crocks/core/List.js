/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _equals = require('./equals')
var _implements = require('./implements')
var _inspect = require('./inspect')
var type = require('./types').type('List')

var isApplicative = require('./isApplicative')
var isArray = require('./isArray')
var isEmpty = require('./isEmpty')
var isFunction = require('./isFunction')
var isSameType = require('./isSameType')
var isSemigroup = require('./isSemigroup')
var predOrFunc = require('./predOrFunc')

var not =
  function (fn) { return function (x) { return !fn(x); }; }

var _concat =
  function (x) { return function (m) { return m.concat(x); }; }

var ref = require('./Maybe');
var Nothing = ref.Nothing;
var Just = ref.Just;

var Pred = require('./types').proxy('Pred')

var _of =
  function (x) { return List([ x ]); }

var _empty =
  function () { return List([]); }

function fromArray(xs) {
  if(!isArray(xs)) {
    throw new TypeError('List.fromArray: Array required')
  }
  return xs.reduce(function (res, x) { return res.concat(List.of(x)); }, List.empty())
}

function runSequence(acc, x) {
  if(!isApplicative(x)) {
    throw new TypeError('List.sequence: Must wrap Applicatives')
  }

  return x
    .map(function (v) { return _concat(List.of(v)); })
    .ap(acc)
}

function runTraverse(f) {
  return function(acc, x) {
    var m = f(x)

    if(!isApplicative(acc) || !isApplicative(m)) {
      throw new TypeError('List.traverse: Both functions must return an Applicative')
    }

    return m
      .map(function (v) { return _concat(List.of(v)); })
      .ap(acc)
  }
}

function List(x) {
  if(!arguments.length) {
    throw new TypeError('List: List must wrap something')
  }

  var xs = isArray(x) ? x.slice() : [ x ]

  function flatMap(fn) {
    return function(y, x) {
      var m = fn(x)

      if(!isSameType(List, m)) {
        throw new TypeError('List.chain: Function must return a List')
      }

      return y.concat(m.valueOf())
    }
  }

  var of =
    _of

  var valueOf =
    function () { return xs.slice(); }

  var toArray =
    valueOf

  var empty =
    _empty

  var inspect =
    function () { return ("List" + (_inspect(xs))); }

  var head =
    function () { return xs.length
      ? Just(xs[0])
      : Nothing(); }

  var tail =
    function () { return xs.length && xs.length > 1
      ? Just(List(xs.slice(1)))
      : Nothing(); }

  var cons =
    function (x) { return List([ x ].concat(xs)); }

  var equals = function (m) { return isSameType(List, m)
      && _equals(xs, m.valueOf()); }

  function concat(m) {
    if(!isSameType(List, m)) {
      throw new TypeError('List.concat: List required')
    }

    return List(xs.concat(m.valueOf()))
  }

  function reduce(fn, i) {
    if(!isFunction(fn)) {
      throw new TypeError('List.reduce: Function required for first argument')
    }

    return xs.reduce(fn, i)
  }

  function fold() {
    if(isEmpty(xs)) {
      throw new TypeError('List.fold: List must contain at least one Semigroup')
    }
    if(xs.length === 1) {
      if(!isSemigroup(xs[0])) {
        throw new TypeError('List.fold: List must contain Semigroups of the same type')
      }
      return xs[0]
    }
    return xs.reduce(function(x, y) {
      if(!(isSemigroup(x) && isSameType(x, y))) {
        throw new TypeError('List.fold: List must contain Semigroups of the same type')
      }
      return x.concat(y)
    })
  }

  function filter(pred) {
    if(!(isFunction(pred) || isSameType(Pred, pred))) {
      throw new TypeError('List.filter: Pred or predicate function required')
    }

    return reduce(
      function (x, y) { return predOrFunc(pred, y) ? x.concat(x.of(y)) : x; },
      empty()
    )
  }

  function reject(pred) {
    if(!(isFunction(pred) || isSameType(Pred, pred))) {
      throw new TypeError('List.reject: Pred or predicate function required')
    }

    var fn = not(function (x) { return predOrFunc(pred, x); })

    return reduce(
      function (x, y) { return fn(y) ? x.concat(x.of(y)) : x; },
      empty()
    )
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('List.map: Function required')
    }

    return List(xs.map(function (x) { return fn(x); }))
  }

  function ap(m) {
    var allFuncs =
      xs.reduce(function (b, i) { return b && isFunction(i); }, true)

    if(!allFuncs) {
      throw new TypeError('List.ap: Wrapped values must all be functions')
    }
    else if(!isSameType(List, m)) {
      throw new TypeError('List.ap: List required')
    }

    return chain(function (fn) { return m.map(fn); })
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('List.chain: Function required')
    }

    return List(xs.reduce(flatMap(fn), []))
  }

  function sequence(af) {
    if(!isFunction(af)) {
      throw new TypeError('List.sequence: Applicative Function required')
    }

    return reduce(
      runSequence,
      af(List.empty())
    )
  }

  function traverse(af, f) {
    if(!isFunction(f) || !isFunction(af)) {
      throw new TypeError('List.traverse: Applicative returning functions required for both arguments')
    }

    return reduce(
      runTraverse(f),
      af(List.empty())
    )
  }

  return {
    inspect: inspect, valueOf: valueOf, toArray: toArray, head: head, tail: tail, cons: cons,
    type: type, equals: equals, concat: concat, empty: empty, reduce: reduce, fold: fold,
    filter: filter, reject: reject, map: map, ap: ap, of: of, chain: chain,
    sequence: sequence, traverse: traverse
  }
}

List.type =
  type

List.of =
  _of

List.empty =
  _empty

List.fromArray =
  fromArray

List['@@implements'] = _implements(
  [ 'ap', 'chain', 'concat', 'empty', 'equals', 'map', 'of', 'reduce', 'traverse' ]
)

module.exports = List
