/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Min')

var isNil = require('../core/isNil')
var isNumber = require('../core/isNumber')
var isSameType = require('../core/isSameType')

var _empty =
  function () { return Min(Infinity); }

function Min(n) {
  var x = isNil(n) ? _empty().valueOf() : n

  if(!arguments.length || !isNumber(x)) {
    throw new TypeError('Min: Numeric value required')
  }

  var valueOf =
    function () { return x; }

  var empty =
    _empty

  var inspect =
    function () { return ("Min" + (_inspect(valueOf()))); }

  function concat(m) {
    if(!isSameType(Min, m)) {
      throw new TypeError('Min.concat: Min required')
    }

    return Min(Math.min(x, m.valueOf()))
  }

  return { inspect: inspect, valueOf: valueOf, type: type, concat: concat, empty: empty }
}

Min['@@implements'] = _implements(
  [ 'concat', 'empty' ]
)

Min.empty = _empty
Min.type = type

module.exports = Min
