/** @license ISC License (c) copyright 2017 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var Maybe = require('../core/Maybe')
var Nothing = Maybe.Nothing;
var Just = Maybe.Just;

var curry = require('../core/curry')
var isArray = require('../core/isArray')
var isDefined = require('../core/isDefined')
var isInteger = require('../core/isInteger')
var isNil= require('../core/isNil')
var isString = require('../core/isString')

var lift = function (x) { return isDefined(x) ? Just(x) : Nothing(); }

// propPath : [ String | Number ] -> a -> Maybe b
function propPath(keys, target) {
  if(!isArray(keys)) {
    throw new TypeError('propPath: Array of strings or integers required for first argument')
  }

  if(isNil(target)) {
    return Nothing()
  }
  return keys.reduce(function (maybe, key) {
    if(!(isString(key) || isInteger(key))) {
      throw new TypeError('propPath: Array of strings or integers required for first argument')
    }
    return maybe.chain(function (x) { return lift(x[key]); })
  }, Maybe.of(target))
}

module.exports = curry(propPath)
