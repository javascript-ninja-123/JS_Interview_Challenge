/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Reader')

var compose = require('../core/compose')
var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

var _of =
  function (x) { return Reader(function () { return x; }); }

function ask(fn) {
  if(!arguments.length) {
    return Reader(function (x) { return x; })
  }

  if(isFunction(fn)) {
    return Reader(fn)
  }

  throw new TypeError('Reader.ask: No argument or function required')
}

function Reader(runWith) {
  if(!arguments.length || !isFunction(runWith)) {
    throw new TypeError('Reader: Must wrap a function')
  }

  var of =
    _of

  var inspect =
    function () { return ("Reader" + (_inspect(runWith))); }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Reader.map: Function required')
    }

    return Reader(compose(fn, runWith))
  }

  function ap(m) {
    if(!isSameType(Reader, m)) {
      throw new TypeError('Reader.ap: Reader required')
    }

    return chain(function (f) { return m.map(f); })
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Reader.chain: Function required')
    }

    return Reader(function(e) {
      var m = fn(runWith(e))

      if(!isSameType(Reader, m)) {
        throw new TypeError('Reader.chain: Function must return a Reader')
      }

      return m.runWith(e)
    })
  }

  return {
    inspect: inspect, runWith: runWith, type: type,
    map: map, ap: ap, chain: chain, of: of
  }
}

Reader.of = _of
Reader.type = type
Reader.ask = ask

Reader['@@implements'] = _implements(
  [ 'ap', 'chain', 'map', 'of' ]
)

module.exports = Reader
