/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Pred')

var compose = require('../core/compose')
var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

var _empty =
  function () { return Pred(function () { return true; }); }

function Pred(pred) {
  if(!isFunction(pred)) {
    throw new TypeError('Pred: Predicate function required')
  }

  var runWith =
    function (x) { return !!pred(x); }

  var inspect =
    function () { return ("Pred" + (_inspect(runWith))); }

  var empty =
    _empty

  var valueOf =
    function () { return runWith; }

  function concat(m) {
    if(!isSameType(Pred, m)) {
      throw new TypeError('Pred.concat: Pred required')
    }

    return Pred(function (x) { return !!runWith(x) && !!m.runWith(x); })
  }

  function contramap(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Pred.contramap: Function required')
    }

    return Pred(compose(runWith, fn))
  }

  return {
    runWith: runWith, inspect: inspect, type: type,
    valueOf: valueOf, empty: empty, concat: concat,
    contramap: contramap
  }
}

Pred.empty = _empty
Pred.type = type

Pred['@@implements'] = _implements(
  [ 'concat', 'contramap', 'empty' ]
)

module.exports = Pred
